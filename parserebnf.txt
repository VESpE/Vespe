start 
  = WS* SelectQuery

SelectQuery
  = ("SELECT" / "select") WS* ( "DISTINCT" / "REDUCED" / "distinct" / "reduced" )? WS* ((Var WS*)+ / "*" ) DatasetClause*  
    WhereClause SolutionModifier

Var = VAR1 / VAR2

DatasetClause 
  = ("FROM"/"from") WS* ( DefaultGraphClause / NamedGraphClause )

WhereClause
  = ("WHERE"/"where")? GroupGraphPattern

SolutionModifier
  = OrderClause? WS* LimitOffsetClauses? WS*

VAR1
  = "?" VARNAME
VAR2
  = "?" VARNAME

DefaultGraphClause
  = SourceSelector

NamedGraphClause
  = "NAMED" SourceSelector

GroupGraphPattern
  = WS* "{" WS* TriplesBlock? ( ( GraphPatternNotTriples / Filter ) WS* "x" "."? WS* TriplesBlock? WS* )* "}"

TriplesBlock
  = TriplesSameSubject WS* ( "." WS* TriplesBlock? )? WS*

OrderClause
  = ("ORDER" WS "BY" / "order" WS "by") OrderCondition+

OrderCondition
  = ( ( "ASC" / "DESC" / "asc" / "desc" ) BrackettedExpression ) / ( Constraint / Var )

LimitOffsetClauses
  = ( LimitClause OffsetClause? / OffsetClause LimitClause? )

SourceSelector
  = IRIref


GraphPatternNotTriples
  = OptionalGraphPattern / GroupOrUnionGraphPattern / GraphGraphPattern

Filter
  = ("FILTER"/"filter") WS* Constraint

Constraint
  = BrackettedExpression / BuiltInCall / FunctionCall

TriplesSameSubject
  = VarOrTerm WS* PropertyListNotEmpty WS* /	TriplesNode WS* PropertyList WS*

BrackettedExpression
  = "(" Expression ")"

LimitClause
  = ("LIMIT"/"limit") WS* INTEGER WS*

OffsetClause
  = ("OFFSET"/"offset") WS* INTEGER WS*

IRIref
  = IRI_REF / PrefixedName

PrefixedName
  = PNAME_LN / PNAME_NS

OptionalGraphPattern
  = ("OPTIONAL"/"optional") GroupGraphPattern

GroupOrUnionGraphPattern
  = GroupGraphPattern ( ("UNION"/"union") GroupGraphPattern )*

GraphGraphPattern
  = ("GRAPH"/"graph") VarOrIRIref GroupGraphPattern

BuiltInCall
  = "STR" "(" Expression ")" 
    / "LANG" "(" Expression ")" 
    / "LANGMATCHES" "(" Expression "," Expression ")" 
    / "DATATYPE" "(" Expression ")" 
    / "BOUND" "(" Var ")" 
    / "sameTerm" "(" Expression "," Expression ")" 
    / "isIRI" "(" Expression ")" 
    / "isURI" "(" Expression ")" 
    / "isBLANK" "(" Expression ")" 
    / "isLITERAL" "(" Expression ")" 
    / RegexExpression

FunctionCall
  = IRIref ArgList

VarOrTerm
  = Var / GraphTerm

PropertyListNotEmpty
  = Verb WS* ObjectList ( ";" ( Verb WS* ObjectList )? )*

TriplesNode
  = Collection / BlankNodePropertyList

PropertyList
  = PropertyListNotEmpty?

Expression
  = ConditionalOrExpression

ConditionalOrExpression
  = ConditionalAndExpression ( "//" ConditionalAndExpression )*
ConditionalAndExpression = ValueLogical ( "&&" ValueLogical )*

INTEGER
  = [0-9]+

PNAME_LN
  = PNAME_NS PN_LOCAL

PNAME_NS
  = PN_PREFIX? ":"

VarOrIRIref
  = Var / IRIref

RegexExpression
  =  ("REGEX"/"regex") "(" Var WS* ("," WS? '"' PN_CHARS_BASE* '"' WS*)+ ")"

ArgList
  = ( NIL / "(" Expression ( "," Expression )* ")" )

GraphTerm
  = IRIref / RDFLiteral / NumericLiteral / BooleanLiteral / BlankNode / NIL

Verb
  = VarOrIRIref / "a"

ObjectList
  = Object ( "," Object )*

Object
  = GraphNode

Collection
  = "(" GraphNode+ ")"

GraphNode
  = VarOrTerm / TriplesNode

BlankNodePropertyList
  = "[" PropertyListNotEmpty "]"

ValueLogical
  = RelationalExpression

PN_LOCAL
  = ( PN_CHARS_U / [0-9] ) ((PN_CHARS/".")* PN_CHARS)?

PN_PREFIX
  = PN_CHARS_BASE ((PN_CHARS/".")* PN_CHARS)?

NIL
  = "(" WS* ")"

RDFLiteral
  = String ( LANGTAG / ( "^^" IRIref ) )?

NumericLiteral
  = NumericLiteralUnsigned / NumericLiteralPositive / NumericLiteralNegative

NumericLiteralUnsigned
  = INTEGER / DECIMAL / DOUBLE

NumericLiteralPositive
  = INTEGER_POSITIVE / DECIMAL_POSITIVE / DOUBLE_POSITIVE

NumericLiteralNegative
  = INTEGER_NEGATIVE / DECIMAL_NEGATIVE / DOUBLE_NEGATIVE

BooleanLiteral
  = "true" / "false"

BlankNode
  = BLANK_NODE_LABEL / ANON

RelationalExpression
  = (NumericExpression ( "=" NumericExpression / "!=" NumericExpression / "<" NumericExpression / ">" NumericExpression / "<=" NumericExpression / ">=" NumericExpression )?) / RegexExpression

NumericExpression
  = AdditiveExpression

AdditiveExpression
  = MultiplicativeExpression ( "+" MultiplicativeExpression / "-" MultiplicativeExpression / NumericLiteralPositive / NumericLiteralNegative )*

MultiplicativeExpression
  = UnaryExpression ( "*" UnaryExpression / "/" UnaryExpression )*

UnaryExpression
  = "!" PrimaryExpression 
    / "+" PrimaryExpression 
    / "-" PrimaryExpression 
    / PrimaryExpression

PrimaryExpression
  = BrackettedExpression / BuiltInCall / IRIrefOrFunction / RDFLiteral / NumericLiteral / BooleanLiteral / Var

PN_CHARS_U
  = PN_CHARS_BASE / "_"

String
  = STRING_LITERAL1 / STRING_LITERAL2 / STRING_LITERAL_LONG1 / STRING_LITERAL_LONG2

LANGTAG
  = "@" [a-zA-Z]+ ("-" [a-zA-Z0-9]+)*

DECIMAL
  = [0-9]+ "." [0-9]* / "." [0-9]+

DOUBLE
  = [0-9]+ "." [0-9]* EXPONENT / "." ([0-9])+ EXPONENT / ([0-9])+ EXPONENT

INTEGER_POSITIVE
  = "+" INTEGER

DECIMAL_POSITIVE
  = "+" DECIMAL

DOUBLE_POSITIVE
  = "+" DOUBLE

INTEGER_NEGATIVE
  = "-" INTEGER

DECIMAL_NEGATIVE
  = "-" DECIMAL

DOUBLE_NEGATIVE
  = "-" DOUBLE

EXPONENT
  = [eE] [+-]? [0-9]+

BLANK_NODE_LABEL
  = "_:" PN_LOCAL

ANON
  = "[" WS* "]"

IRIrefOrFunction
  = IRIref ArgList?

STRING_LITERAL1
  = "'" ( ([^#x27#x5C#xA#xD]) / ECHAR )* "'"

STRING_LITERAL2
  = '"' (([\x22] / [\x5C] / [\x0A] / [\x0D]) / ECHAR )* '"'

STRING_LITERAL_LONG1
  = "'''" ( ( "'" / "''" )? ( [^'\'] / ECHAR ) )* "'''"

STRING_LITERAL_LONG2
  = '"""' ( ( '"' / '""' )? ( [^"\"] / ECHAR ) )* '"""'

ECHAR
  = '\\'

WS
  = [" " / "\n" / "\t" / "\r"]

PN_CHARS_BASE
  =  [A-Z] / [a-z]  / ":" / "/" / "." / "%" / "&" / "$"

PN_CHARS
  = PN_CHARS_U / '-' / [0-9] / [u00B7] / [u0300-u036F] / [u203F-u2040]

IRI_REF
  = '<' PN_CHARS_BASE+ '>'

VARNAME
  = ( PN_CHARS_U / [0-9] ) ( PN_CHARS_U / [0-9] / [u00B7] / [u0300-u036F] / [u203F-u2040] )*